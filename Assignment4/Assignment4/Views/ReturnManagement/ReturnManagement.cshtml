<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Return Management System</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <style>
        .is-invalid {
            border-color: red;
        }


        #tblReturnItems thead th {
            width: 100%;
        }

        .table-hover tbody tr:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="container-fluid mt-3">
        <div>
            @Html.Partial("~/Partialviews/_SearchBar.cshtml")
        </div>
       
        <button class="customBtn mb-2 mt-2" onclick="LoadReturnForm()">Add Return</button>

        <table id="tblReturns" class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Return ID</th>
                    <th>Customer Name</th>
                    <th>Return Date</th>
                    <th>Total Amount</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <!-- Return Modal -->
        <div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <!-- Increased modal size to extra-large -->
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="returnModalLabel">Add/Edit Return</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Customer <span class="text-danger">*</span></label>
                                <select class="form-select ClearReturnModalData requiredfield" id="ddlCustomer">
                                    <option value="">Select Customer</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Return Date <span class="text-danger">*</span></label>
                                <input type="date" class="form-control ClearReturnModalData requiredfield" id="txtReturnDate" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Return Reason <span class="text-danger">*</span></label>
                            <input type="text" class="form-control ClearReturnModalData requiredfield" id="txtReasonForReturn" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Final Price</label>
                                <input type="number" class="form-control ClearReturnModalData" id="txtFinalPrice" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <h5>Return Items</h5>
                            <div class="table-responsive">
                                <!-- Makes table scrollable on small screens -->
                                <table id="tblReturnItems" class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th style="width: 12%;">Item</th> 
                                            <th style="width: 12%;">Return Reason</th>
                                            <th style="width: 8%;">Quantity</th>
                                            <th style="width: 8%;">Unit</th>
                                            <th style="width: 12%;">Price Per Unit</th>
                                            <th style="width: 8%;">Discount (%)</th>
                                            <th style="width: 15%;">Total Price</th> 
                                            <th style="width: 8%;">Action</th>
                                            <th style="width: 15%;">Reuse Destination</th>
                                            <th style="width: 15%;">Reuse Destination Type</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <button class="btn btn-sm btn-primary mt-2" onclick="AddReturnItemRow()">Add Item</button>
                        </div>

                        <input type="hidden" class="ClearReturnModalData" id="txtReturnIdHidden">
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="SaveReturn()" class="btn btn-primary">Save Return</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>


    <!-- Required Libraries -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        // Global Variables
        var InventoryItems = [];
        var Customers = [];
        let allReturnsData = [];
        // Document Ready Function
        $(document).ready(function () {
            
            // Configure Toastr
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };

            // Initial Data Load
            GetReturnsData();
            GetCustomers();
            GetInventoryItems();

            // Event Handlers
            $('#tblReturns').on('click', '.btn-edit', function () {
                var fullData = JSON.parse($(this).attr('data-full-data'));
                EditReturn(fullData);
            });

            $('#tblReturns').on('click', '.btn-delete', function () {
                var ID = JSON.parse($(this).attr('data-id'));
                DeleteReturn(ID);
            });
        });
               
        // Validation Function
        function ValidateReturnForm() {
            let isValid = true;
            $('.requiredfield').each(function() {
                if (!$(this).val()) {
                    $(this).addClass('is-invalid');
                    isValid = false;
                } else {
                    $(this).removeClass('is-invalid');
                }
            });

            // Validate return items
            if ($('#tblReturnItems tbody tr').length === 0) {
                toastr.error('Please add at least one return item');
                isValid = false;
            }

            return isValid;
        }

        // Get Returns Data
        function GetReturnsData() {
            $.ajax({
                url: '/ReturnManagement/GetReturns',
                type: 'GET',
                success: function (response) {
                    const tableBody = $('#tblReturns tbody');
                    tableBody.empty();

                    response.forEach(function (returnData) {
                        const row = `
                            <tr>
                                <td>${returnData.returnId}</td>
                                <td>${returnData.customerName}</td>
                                <td>${returnData.returnDate}</td>
                                <td>${returnData.returnPrice}</td>
                                <td>${returnData.status}</td>
                                <td>
                                    <button class="btn btn-sm btn-info btn-edit" data-full-data='${JSON.stringify(returnData)}'>Edit</button>
                                    <button class="btn btn-sm btn-danger btn-delete" data-id="${returnData.returnId}">Delete</button>
                                </td>
                            </tr>`;
                        tableBody.append(row);
                    });
                },
                error: function (xhr, status, error) {
                    toastr.error('Error loading returns data: ' + error);
                }
            });
        }

        // Load Return Form
        function LoadReturnForm() {
            $('.ClearReturnModalData').val('');
            $('#tblReturnItems tbody').empty();
            $('#returnModal').modal('show');
        }

        // Get Customers
        function GetCustomers() {
            $.ajax({
                url: '/Configuration/GetCustomer',
                type: 'POST',
                success: function (response) {
                    Customers = response;
                    const selectElement = $('#ddlCustomer');
                    selectElement.empty().append('<option value="">Select Customer</option>');

                    if (response && response.length > 0) {
                        response.forEach(item => {
                            selectElement.append(`<option value="${item.customerId}">${item.customerName}</option>`);
                        });
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('Error fetching customers: ' + error);
                }
            });
        }

        // Get Inventory Items
        function GetInventoryItems() {
            $.ajax({
                url: '/ReturnManagement/GetInventoryItems',
                type: 'GET',
                success: function (response) {
                    InventoryItems = response || [];
                },
                error: function (xhr, status, error) {
                    toastr.error('Error fetching inventory items: ' + error);
                }
            });
        }

        // Add Return Item Row
        function AddReturnItemRow() {
            let tableBody = $('#tblReturnItems tbody');
            let rowIndex = tableBody.children().length;
            let newRow = `
            <tr>
                <td>
                    <select class="form-select item-dropdown" id="item_${rowIndex}" onchange="UpdatePriceAndUnit(${rowIndex})">
                        <option value="">Select Item</option>
                        ${InventoryItems.map(item =>
                            `<option value="${item.itemId}"
                                data-unit="${item.unit}"
                                data-price="${item.pricePerUnit}">${item.itemName}</option>`
                        ).join('')}
                    </select>
                </td>
                <td><input type="text" class="form-control" id="itemReturnReason_${rowIndex}" /></td>
                <td><input type="number" class="form-control" id="quantity_${rowIndex}" oninput="CalculatePrice(${rowIndex})" /></td>
                <td><input type="text" class="form-control unit-field" id="unit_${rowIndex}" readonly /></td>
                <td><input type="number" class="form-control item-price" id="price_${rowIndex}" readonly /></td>
                <td><input type="number" class="form-control item-discount" id="discount_${rowIndex}" value="10" oninput="CalculatePrice(${rowIndex})" /></td>
                <td><input type="number" class="form-control item-total-price" id="totalPrice_${rowIndex}" readonly /></td>
                <td><button class="btn btn-sm btn-danger" onclick="RemoveReturnItemRow(this)">Remove</button></td>
                <td>
                    <select class="form-select" id="reuseDestination_${rowIndex}" onchange="UpdateReuseDestination(${rowIndex})">
                        <option value="Recycled">Recycled</option>
                        <option value="Restocked">Restocked</option>
                        <option value="Discarded">Discarded</option>
                    </select>
                </td>
                <td>
                    <select class="form-select" id="reuseDestinationType_${rowIndex}" style="display:none;"></select>
                </td>
            </tr>`;
            tableBody.append(newRow);
        }

        // Remove Return Item Row
        function RemoveReturnItemRow(button) 
        {
            $(button).closest('tr').remove();
            UpdateFinalPrice();
        }

        // Update Price and Unit
        function UpdatePriceAndUnit(index)
        {
            let selectedOption = $(`#item_${index} option:selected`);
            let unit = selectedOption.data('unit');
            let pricePerUnit = selectedOption.data('price');

            $(`#unit_${index}`).val(unit);
            $(`#price_${index}`).val(pricePerUnit);
            CalculatePrice(index);
        }

        // Calculate Price
        function CalculatePrice(index) {
            let quantity = parseFloat($(`#quantity_${index}`).val()) || 0;
            let pricePerUnit = parseFloat($(`#price_${index}`).val()) || 0;
            let discount = parseFloat($(`#discount_${index}`).val()) || 0;

            let totalPrice = (quantity * pricePerUnit) * (1 - discount / 100);
            $(`#totalPrice_${index}`).val(totalPrice.toFixed(2));
            UpdateFinalPrice();
        }

        // Update Final Price
        function UpdateFinalPrice() {
            let finalPrice = 0;
            $('#tblReturnItems tbody tr').each(function () {
                let totalPrice = parseFloat($(this).find('.item-total-price').val()) || 0;
                finalPrice += totalPrice;
            });
            $('#txtFinalPrice').val(finalPrice.toFixed(2));
        }

        // Update Reuse Destination
        function UpdateReuseDestination(index) {
            let reuseDestination = $(`#reuseDestination_${index}`).val();
            let reuseDestinationType = $(`#reuseDestinationType_${index}`);
            reuseDestinationType.empty();

            if (reuseDestination === "Recycled" || reuseDestination === "Restocked") {
                InventoryItems.forEach(item => {
                    reuseDestinationType.append(`<option value="${item.itemId}">${item.itemName}</option>`);
                });
                reuseDestinationType.show();
            } else {
                reuseDestinationType.hide();
            }
        }

        // Edit Return
        function EditReturn(returnData) {
            // Populate main return details
            $('#txtReturnIdHidden').val(returnData.returnId);
            $('#ddlCustomer').val(returnData.customerId);

                      
            var returnDate = new Date(returnData.returnDate);

            // Format the date as YYYY-MM-DD
            var formattedDate = returnDate.toISOString().split('T')[0];

            // Set the value of the datepicker
            $('#txtReturnDate').val(formattedDate);


                $('#txtReasonForReturn').val(returnData.returnDescription);
            $('#ddlReturnStatus').val(returnData.status);
            $('#txtFinalPrice').val(returnData.returnPrice);

            // Clear existing return items
            let tableBody = $('#tblReturnItems tbody');
            tableBody.empty();

            // Fetch return items
            $.ajax({
                url: `/ReturnManagement/GetReturnItemsById?returnId=${returnData.returnId}`,
                type: 'GET',
                success: function (returnItems) {
                    debugger
                    returnItems.forEach((item, index) => {
                        let newRow = `
                        <tr>
                            <td>
                                <select class="form-select item-dropdown" id="item_${index}" onchange="UpdatePriceAndUnit(${index})">
                                    ${InventoryItems.map(invItem =>
                                        `<option value="${invItem.itemId}"
                                            ${invItem.itemId === item.fkInventoryItemId ? 'selected' : ''}
                                            data-unit="${invItem.unit}"
                                            data-price="${invItem.pricePerUnit}">${invItem.itemName}</option>`
                                    ).join('')}
                                </select>
                            </td>
                            <td><input type="text" class="form-control" id="itemReturnReason_${index}" value="${item.returnReason}" /></td>
                            <td><input type="number" class="form-control" id="quantity_${index}" value="${item.quantity}" oninput="CalculatePrice(${index})" /></td>
                            <td><input type="text" class="form-control unit-field" id="unit_${index}" value="${item.unit}" readonly /></td>
                            <td><input type="number" class="form-control item-price" id="price_${index}" value="${item.pricePerUnit}" readonly /></td>
                            <td><input type="number" class="form-control item-discount" id="discount_${index}" value="${item.discount}" oninput="CalculatePrice(${index})" /></td>
                            <td><input type="number" class="form-control item-total-price" id="totalPrice_${index}" value="${item.returnPrice}" readonly /></td>
                            <td><button class="btn btn-sm btn-danger" onclick="RemoveReturnItemRow(this)">Remove</button></td>
                            <td>
                                <select class="form-select" id="reuseDestination_${index}" onchange="UpdateReuseDestination(${index})">
                                    <option value="Recycled" ${item.reuseDestination === "Recycled" ? "selected" : ""}>Recycled</option>
                                    <option value="Restocked" ${item.reuseDestination === "Restocked" ? "selected" : ""}>Restocked</option>
                                    <option value="Discarded" ${item.reuseDestination === "Discarded" ? "selected" : ""}>Discarded</option>
                                </select>
                            </td>
                            <td>
                                <select class="form-select" id="reuseDestinationType_${index}" style="display:none;"></select>
                            </td>
                        </tr>`;

                        tableBody.append(newRow);
                        UpdatePriceAndUnit(index);
                        UpdateReuseDestination(index);
                    });

                    $('#returnModal').modal('show');


                },
                error: function (xhr, status, error) {
                    toastr.error('Error fetching return items: ' + error);
                }
            });
        }

        // Save Return
        function SaveReturn() {
            // Validate form
            if (!ValidateReturnForm()) {
                return;
            }

            let returnItems = [];
            let returnData = {
                
                returnId: $('#txtReturnIdHidden').val() || 0,
                fkcotomerID : $('#ddlCustomer').val(),
                returnDate: $('#txtReturnDate').val(),
                returnDescription : $('#txtReasonForReturn').val(),
               
                TotalReturnPrice: $('#txtFinalPrice').val()
            };

            $('#tblReturnItems tbody tr').each(function (index) {
                let returnItem = {
                    fkInventoryItemId : $(this).find(`#item_${index}`).val(),
                    returnReason : $(this).find(`#itemReturnReason_${index}`).val(),
                    quantity: $(this).find(`#quantity_${index}`).val(),
                    unit: $(this).find(`#unit_${index}`).val(),
                    price: $(this).find(`#price_${index}`).val(),
                    discount: $(this).find(`#discount_${index}`).val(),
                    returnPrice : $(this).find(`#totalPrice_${index}`).val(),
                    ReuseDestination : $(this).find(`#reuseDestination_${index}`).val(),
                    fkReuseDestianationItemId : $(this).find(`#reuseDestinationType_${index}`).val() || null
                };
                returnItems.push(returnItem);
            });
            debugger

            $.ajax({
                url: '/ReturnManagement/AddOrEditReturn',
                type: 'POST',
               
                data: {
                    returnData: returnData,
                    returnItems: returnItems
                },
                   success: function(response) {
                   
                    if (response) {
                        msgPopup('success', 'data saved successfully');
                        $('#returnModal').modal('toggle');
                        GetReturnsData();
                     
                    } else {
                        msgPopup('error','Failed to ' + (id ? 'update' : 'add') + ' data.');
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('An error occurred while saving return: ' + error);
                }
            });
        }

        // Delete Warning
      

        // Delete Return
        function DeleteReturn(id) {
            $.ajax({
                url: '/ReturnManagement/DeleteReturn',
                type: 'POST',
                data: { returnId: id },
                success: function (response) {
                    if (response) {
                        toastr.success('Return deleted successfully!');
                        GetReturnsData();
                    } else {
                        toastr.error('Error deleting return: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('An error occurred while deleting return: ' + error);
                }
            });
        }
    </script>
</body>
</html>