<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Booking Calendar</title>
    <!-- CSS styles would go here, but we're keeping the existing styling -->
</head>
<body>

    <h1>Event Booking Calendar</h1>

    <!-- Booking Modal -->
    <div id="bookingModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="booking-modal-title">Add New Booking</h2>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <div class="form-group" hidden>
                    <label>Booking ID</label>
                    <input type="number" id="bookingId" class="ClearBookingModalData" />
                </div>
                <div class="form-group" hidden>
                    <input type="number" id="userId" class="ClearBookingModalData" value="1" />
                </div>
                <div class="form-group">
                    <label>Event</label>
                    <select id="eventId" class="ClearBookingModalData" required>
                        <option value="">-- Select Event --</option>
                        <option value="1">Birthday Party</option>
                        <option value="2">Wedding</option>
                        <option value="3">Corporate Event</option>
                        <option value="4">Family Gathering</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Booking Date</label>
                    <input type="date" id="bookingDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>From Date</label>
                    <input type="date" id="fromDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>To Date</label>
                    <input type="date" id="toDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Shift Type</label>
                    <select id="shiftType" class="ClearBookingModalData" required>
                        <option value="">-- Select Shift --</option>
                        <option value="morning">Morning</option>
                        <option value="evening">Evening</option>
                        <option value="fullday">Full Day</option>
                    </select>
                </div>
                <div id="dateWiseShiftContainer">
                    <!-- Will be filled dynamically -->
                </div>
                <div class="form-group">
                    <label>Booking Status</label>
                    <select id="bookingStatus" class="ClearBookingModalData" required>
                        <option value="">-- Select Status --</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Pending">Pending</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Total Amount</label>
                    <input type="number" id="totalAmount" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Advance Payment</label>
                    <input type="number" id="advancePayment" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Remaining Payment</label>
                    <input type="number" id="remainingPayment" class="ClearBookingModalData" readonly />
                </div>
                <div class="form-group">
                    <label>Payment Status</label>
                    <select id="paymentStatus" class="ClearBookingModalData" required>
                        <option value="">-- Select Payment Status --</option>
                        <option value="Paid">Paid</option>
                        <option value="Partially Paid">Partially Paid</option>
                        <option value="Pending">Pending</option>
                    </select>
                </div>
                <div class="form-group" hidden>
                    <label>Created Date</label>
                    <input type="date" id="createdDate" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Customer Name</label>
                    <input type="text" id="customerName" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Phone Number</label>
                    <input type="text" id="phoneNumber" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Alternative Number</label>
                    <input type="text" id="alternativeNumber" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Address</label>
                    <textarea id="address" class="ClearBookingModalData"></textarea>
                </div>
                <div id="modal-message" class="success-message"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="save-booking" class="btn btn-primary">Save</button>
                <button type="button" id="delete-booking" class="btn btn-danger" style="display: none;">Delete</button>
                <button type="button" id="close-booking-modal" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>

    <!-- View Details Modal -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Booking Details</h2>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <div class="booking-details">
                    <!-- Will be filled dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="edit-from-details" class="btn btn-primary">Edit</button>
                <button type="button" id="close-details-modal" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>

    <!-- Quick Booking Form -->
    <div id="booking-form">
        <h3>Quick Booking</h3>
        <div class="form-group">
            <label for="booking-date">Select Date:</label>
            <input type="text" id="booking-date" placeholder="Click to select date" readonly>
        </div>
        <div class="form-group">
            <label for="booking-shift">Select Shift:</label>
            <select id="booking-shift">
                <option value="">-- Select Shift --</option>
                <option value="morning">Morning</option>
                <option value="evening">Evening</option>
                <option value="fullday">Full Day</option>
            </select>
        </div>
        <button id="quick-book">Quick Book</button>
    </div>

    <!-- Action Buttons -->
    <div>
        <button id="fetch-bookings">Refresh Calendar</button>
        <button id="open-booking-modal">New Booking</button>
        <button id="view-all-bookings">View All Bookings</button>
    </div>

    <div id="spinner" class="spinner"></div>
    <div id="message" class="success-message"></div>

    <!-- Calendar Display -->
    <div id="calendar"></div>

    <!-- Bookings List Table (initially hidden) -->
    <div id="bookings-list-container" style="display: none;">
        <h2>All Bookings</h2>
        <table id="event-list">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Event</th>
                    <th>Customer</th>
                    <th>Date Range</th>
                    <th>Shift</th>
                    <th>Status</th>
                    <th>Payment</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="event-list-body">
                <!-- Will be filled dynamically -->
            </tbody>
        </table>
        <button id="back-to-calendar">Back to Calendar</button>
    </div>
    <!-- jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- jQuery UI -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

    <!-- FullCalendar -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initialize FullCalendar
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                selectable: true,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,dayGridWeek'
                },
                dateClick: function (info) {
                    // Set the selected date in the quick booking form
                    $('#booking-date').val(info.dateStr);

                    // Also set this date in the booking modal
                    let currentDate = new Date(info.dateStr);
                    let formattedDate = currentDate.toISOString().split('T')[0];
                    openBookingModal(formattedDate);
                },
                eventClick: function (info) {
                    // Get the booking ID from the event
                    const bookingId = info.event.id;
                    viewBookingDetails(bookingId);
                },
                events: [] // Will be populated by loadEvents
            });
            calendar.render();

            // Load initial events
            loadEvents();

            // Initialize jQuery UI Datepicker for the quick booking form
            $('#booking-date').datepicker({
                dateFormat: 'yy-mm-dd',
                onSelect: function (dateText) {
                    // When a date is selected in the datepicker, also set it in the booking modal
                    $('#bookingDate').val(dateText);
                    $('#fromDate').val(dateText);
                    $('#toDate').val(dateText);
                }
            });

            // Event listeners for date inputs in booking modal
            $('#bookingDate, #fromDate, #toDate').change(function () {
                // When dates change, maybe need to regenerate shift options
                if ($('#shiftType').val() !== 'fullday' && $('#fromDate').val() && $('#toDate').val()) {
                    generateDateWiseShifts();
                }
            });

            // Event listener for shift type change
            $('#shiftType').change(function () {
                const shiftType = $(this).val();
                if (shiftType === 'fullday') {
                    $('#dateWiseShiftContainer').hide();
                } else if (shiftType && $('#fromDate').val() && $('#toDate').val()) {
                    $('#dateWiseShiftContainer').show();
                    generateDateWiseShifts();
                }
            });

            // Event listeners for payment calculation
            $('#totalAmount, #advancePayment').on('input', function () {
                calculateRemainingPayment();
            });

            // Function to calculate remaining payment
            function calculateRemainingPayment() {
                const total = parseFloat($('#totalAmount').val()) || 0;
                const advance = parseFloat($('#advancePayment').val()) || 0;
                const remaining = total - advance;
                $('#remainingPayment').val(remaining >= 0 ? remaining : 0);

                // Auto-update payment status based on values
                if (advance === 0) {
                    $('#paymentStatus').val('Pending');
                } else if (advance >= total) {
                    $('#paymentStatus').val('Paid');
                } else {
                    $('#paymentStatus').val('Partially Paid');
                }
            }

            // Quick book button click
            $('#quick-book').click(function () {
                const selectedDate = $('#booking-date').val();
                const selectedShift = $('#booking-shift').val();

                if (!selectedDate) {
                    showMessage('Please select a date first.', 'error');
                    return;
                }

                if (!selectedShift) {
                    showMessage('Please select a shift.', 'error');
                    return;
                }

                // Open booking modal with pre-filled values
                openBookingModal(selectedDate, {
                    shiftType: selectedShift,
                    fromDate: selectedDate,
                    toDate: selectedDate
                });
            });

            // Open booking modal button click
            $('#open-booking-modal').click(function () {
                openBookingModal();
            });

            // Save booking button click
            $('#save-booking').click(function () {
                if (validateBookingForm()) {
                    saveBooking();
                }
            });

            // Delete booking button click
            $('#delete-booking').click(function () {
                const bookingId = $('#bookingId').val();
                if (bookingId) {
                    if (confirm('Are you sure you want to delete this booking?')) {
                        deleteBooking(bookingId);
                    }
                }
            });

            // View all bookings button click
            $('#view-all-bookings').click(function () {
                $('#calendar').hide();
                $('#booking-form').hide();
                loadBookingsList();
                $('#bookings-list-container').show();
            });

            // Back to calendar button click
            $('#back-to-calendar').click(function () {
                $('#bookings-list-container').hide();
                $('#calendar').show();
                $('#booking-form').show();
            });

            // Refresh calendar button click
            $('#fetch-bookings').click(function () {
                loadEvents();
                showMessage('Calendar refreshed.', 'success');
            });

            // Edit from details modal
            $('#edit-from-details').click(function () {
                const bookingId = $(this).data('booking-id');
                $('#detailsModal').hide();
                openBookingModalForEdit(bookingId);
            });

            // Close booking modal
            $('#close-booking-modal, .close-button').click(function () {
                $('#bookingModal').hide();
            });

            // Close details modal
            $('#close-details-modal, #detailsModal .close-button').click(function () {
                $('#detailsModal').hide();
            });

            // Function to generate date-wise shift inputs
            function generateDateWiseShifts() {
                const fromDateStr = $('#fromDate').val();
                const toDateStr = $('#toDate').val();
                const container = $('#dateWiseShiftContainer');

                if (!fromDateStr || !toDateStr) return;

                const fromDate = new Date(fromDateStr);
                const toDate = new Date(toDateStr);

                if (fromDate > toDate) {
                    showMessage('From Date must be before or equal to To Date.', 'error');
                    return;
                }

                container.empty();

                // Add header for the shift selection
                container.append('<h4>Select Shifts for Each Date:</h4>');

                const shiftTypes = ['Morning', 'Evening'];
                const currentDate = new Date(fromDate);

                // For each date in the range
                while (currentDate <= toDate) {
                    const dateStr = currentDate.toISOString().split('T')[0];
                    const shiftRow = $('<div class="shift-row"></div>');

                    // Add date label
                    const dateParts = dateStr.split('-');
                    const formattedDate = `${dateParts[1]}/${dateParts[2]}/${dateParts[0]}`;
                    shiftRow.append(`<label>${formattedDate}</label>`);

                    // Add checkboxes for each shift type
                    shiftTypes.forEach(shift => {
                        const checkbox = $(`
                            <label>
                                <input type="checkbox" name="shifts[${dateStr}]" value="${shift.toLowerCase()}"> ${shift}
                            </label>
                        `);
                        shiftRow.append(checkbox);
                    });

                    container.append(shiftRow);

                    // Move to next day
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            }

            // Function to open booking modal for new booking or with specific date
            function openBookingModal(dateStr = '', prefillData = {}) {
                // Reset form
                resetBookingForm();

                // Set modal title for new booking
                $('#booking-modal-title').text('Add New Booking');

                // Hide delete button for new bookings
                $('#delete-booking').hide();

                // Set today as default for booking date if not specified
                const today = new Date().toISOString().split('T')[0];
                $('#bookingDate').val(dateStr || today);
                $('#fromDate').val(dateStr || today);
                $('#toDate').val(dateStr || today);

                // Set created date
                $('#createdDate').val(today);

                // Prefill data if provided
                if (prefillData) {
                    for (const [key, value] of Object.entries(prefillData)) {
                        $(`#${key}`).val(value);
                    }

                    // If shift type is specified, maybe need to show date-wise shifts
                    if (prefillData.shiftType && prefillData.shiftType !== 'fullday' &&
                        $('#fromDate').val() && $('#toDate').val()) {
                        generateDateWiseShifts();
                    }
                }

                // Show the modal
                $('#bookingModal').show();
            }

            // Function to open booking modal for editing
            function openBookingModalForEdit(bookingId) {
                // Show spinner
                $('#spinner').show();

                // Get booking data from API
                $.ajax({
                    url: `/EventBooking/GetBookingById`,
                    type: 'GET',
                    data: { id: bookingId },
                    success: function (booking) {
                        if (!booking) {
                            showMessage('Booking not found.', 'error');
                            $('#spinner').hide();
                            return;
                        }

                        // Reset form first
                        resetBookingForm();

                        // Set modal title for editing
                        $('#booking-modal-title').text('Edit Booking');

                        // Show delete button for existing bookings
                        $('#delete-booking').show();

                        // Fill form with booking data
                        $('#bookingId').val(booking.id);
                        $('#userId').val(booking.userId || 1);
                        $('#eventId').val(booking.eventId);
                        $('#bookingDate').val(formatDateForInput(booking.bookingDate));
                        $('#fromDate').val(formatDateForInput(booking.fromDate));
                        $('#toDate').val(formatDateForInput(booking.toDate));
                        $('#shiftType').val(booking.shiftType);
                        $('#bookingStatus').val(booking.bookingStatus);
                        $('#totalAmount').val(booking.totalAmount);
                        $('#advancePayment').val(booking.advancePayment);
                        $('#remainingPayment').val(booking.remainingPayment);
                        $('#paymentStatus').val(booking.paymentStatus);
                        $('#createdDate').val(formatDateForInput(booking.createdDate));
                        $('#customerName').val(booking.customerName);
                        $('#phoneNumber').val(booking.phoneNumber);
                        $('#alternativeNumber').val(booking.alternativeNumber);
                        $('#address').val(booking.address);

                        // If it's not a full day shift and we have a date range, generate shift selections
                        if (booking.shiftType !== 'fullday') {
                            generateDateWiseShifts();

                            // Check the corresponding shift checkboxes if we have dateWiseShifts data
                            if (booking.dateWiseShifts) {
                                setTimeout(() => {
                                    try {
                                        const dateWiseShifts = JSON.parse(booking.dateWiseShifts);

                                        Object.entries(dateWiseShifts).forEach(([date, shifts]) => {
                                            shifts.forEach(shift => {
                                                $(`input[name="shifts[${date}]"][value="${shift}"]`).prop('checked', true);
                                            });
                                        });
                                    } catch (e) {
                                        console.error("Error parsing dateWiseShifts:", e);
                                    }
                                }, 100); // Small delay to ensure DOM is ready
                            }
                        }

                        // Hide spinner
                        $('#spinner').hide();

                        // Show the modal
                        $('#bookingModal').show();
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error loading booking details: ' + xhr.responseText, 'error');
                    }
                });
            }

            // Function to view booking details
            function viewBookingDetails(bookingId) {
                // Show spinner
                $('#spinner').show();

                // Get booking data from API
                $.ajax({
                    url: `/EventBooking/GetBookingById`,
                    type: 'GET',
                    data: { id: bookingId },
                    success: function (booking) {
                        if (!booking) {
                            showMessage('Booking not found.', 'error');
                            $('#spinner').hide();
                            return;
                        }

                        // Get event name
                        const eventName = getEventName(booking.eventId);

                        // Prepare the detail content
                        let detailsHTML = `
                            <div class="detail-row">
                                <div class="detail-label">Event Type:</div>
                                <div class="detail-value">${eventName}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Customer:</div>
                                <div class="detail-value">${booking.customerName}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Contact:</div>
                                <div class="detail-value">${booking.phoneNumber}</div>
                            </div>`;

                        if (booking.alternativeNumber) {
                            detailsHTML += `
                            <div class="detail-row">
                                <div class="detail-label">Alternative Contact:</div>
                                <div class="detail-value">${booking.alternativeNumber}</div>
                            </div>`;
                        }

                        detailsHTML += `
                            <div class="detail-row">
                                <div class="detail-label">Booking Date:</div>
                                <div class="detail-value">${formatDate(booking.bookingDate)}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Date Range:</div>
                                <div class="detail-value">${formatDate(booking.fromDate)} to ${formatDate(booking.toDate)}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Shift Type:</div>
                                <div class="detail-value">${capitalizeFirstLetter(booking.shiftType)}</div>
                            </div>`;

                        // If there are date-wise shifts, show them
                        if (booking.dateWiseShifts) {
                            try {
                                const dateWiseShifts = JSON.parse(booking.dateWiseShifts);

                                if (Object.keys(dateWiseShifts).length > 0) {
                                    detailsHTML += `
                                    <div class="detail-row">
                                        <div class="detail-label">Selected Shifts:</div>
                                        <div class="detail-value">`;

                                    Object.entries(dateWiseShifts).forEach(([date, shifts]) => {
                                        detailsHTML += `${formatDate(date)}: ${shifts.map(s => capitalizeFirstLetter(s)).join(', ')}<br>`;
                                    });

                                    detailsHTML += `</div>
                                    </div>`;
                                }
                            } catch (e) {
                                console.error("Error parsing dateWiseShifts:", e);
                            }
                        }

                        detailsHTML += `
                            <div class="detail-row">
                                <div class="detail-label">Booking Status:</div>
                                <div class="detail-value">${booking.bookingStatus}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Total Amount:</div>
                                <div class="detail-value">${booking.totalAmount}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Advance Payment:</div>
                                <div class="detail-value">${booking.advancePayment || '0'}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Remaining Payment:</div>
                                <div class="detail-value">${booking.remainingPayment}</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Payment Status:</div>
                                <div class="detail-value">${booking.paymentStatus}</div>
                            </div>`;

                        if (booking.address) {
                            detailsHTML += `
                            <div class="detail-row">
                                <div class="detail-label">Address:</div>
                                <div class="detail-value">${booking.address}</div>
                            </div>`;
                        }

                        // Add created date if available
                        if (booking.createdDate) {
                            detailsHTML += `
                            <div class="detail-row">
                                <div class="detail-label">Booking Created:</div>
                                <div class="detail-value">${formatDate(booking.createdDate)}</div>
                            </div>`;
                        }

                        // Set the details content
                        $('#detailsModal .booking-details').html(detailsHTML);

                        // Set the booking ID for the edit button
                        $('#edit-from-details').data('booking-id', booking.id);

                        // Hide spinner
                        $('#spinner').hide();

                        // Show the modal
                        $('#detailsModal').show();
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error loading booking details: ' + xhr.responseText, 'error');
                    }
                });
            }

            // Function to validate booking form
            function validateBookingForm() {
                // Required fields
                const requiredFields = [
                    { id: 'eventId', name: 'Event' },
                    { id: 'bookingDate', name: 'Booking Date' },
                    { id: 'fromDate', name: 'From Date' },
                    { id: 'toDate', name: 'To Date' },
                    { id: 'shiftType', name: 'Shift Type' },
                    { id: 'bookingStatus', name: 'Booking Status' },
                    { id: 'totalAmount', name: 'Total Amount' },
                    { id: 'paymentStatus', name: 'Payment Status' },
                    { id: 'customerName', name: 'Customer Name' },
                    { id: 'phoneNumber', name: 'Phone Number' }
                ];

                for (const field of requiredFields) {
                    const value = $(`#${field.id}`).val();
                    if (!value || value.trim() === '') {
                        showMessage(`${field.name} is required.`, 'error', 'modal-message');
                        return false;
                    }
                }

                // Date validation
                const bookingDate = new Date($('#bookingDate').val());
                const fromDate = new Date($('#fromDate').val());
                const toDate = new Date($('#toDate').val());

                if (fromDate > toDate) {
                    showMessage('From Date must be before or equal to To Date.', 'error', 'modal-message');
                    return false;
                }

                if (bookingDate < fromDate || bookingDate > toDate) {
                    showMessage('Booking Date must be within the From and To Date range.', 'error', 'modal-message');
                    return false;
                }

                // Shift validation for non-full day bookings
                const shiftType = $('#shiftType').val();
                if (shiftType !== 'fullday') {
                    // Check if at least one shift is selected
                    const anyShiftSelected = $('#dateWiseShiftContainer input[type="checkbox"]:checked').length > 0;
                    if (!anyShiftSelected) {
                        showMessage('Please select at least one shift.', 'error', 'modal-message');
                        return false;
                    }
                }

                return true;
            }

            // Function to save booking
            function saveBooking() {
                // Show spinner
                $('#spinner').show();

                const bookingId = $('#bookingId').val();
                const isNewBooking = !bookingId || bookingId === '0';

                // Collect date-wise shifts if applicable
                let dateWiseShifts = {};
                if ($('#shiftType').val() !== 'fullday') {
                    $('#dateWiseShiftContainer .shift-row').each(function() {
                        const dateLabel = $(this).find('label').first().text();
                        // Convert MM/DD/YYYY to YYYY-MM-DD
                        const dateParts = dateLabel.split('/');
                        const date = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`;

                        const selectedShifts = [];
                        $(this).find('input[type="checkbox"]:checked').each(function() {
                            selectedShifts.push($(this).val());
                        });

                        if (selectedShifts.length > 0) {
                            dateWiseShifts[date] = selectedShifts;
                        }
                    });
                }

                // Collect all form data
                const bookingData = {
                    id: isNewBooking ? 0 : parseInt(bookingId),
                    userId: $('#userId').val() || 1,
                    eventId:3,
                    id: isNewBooking ? 0 : parseInt(bookingId),
                    userId: $('#userId').val() || 1,
                    eventId: parseInt($('#eventId').val()),
                    bookingDate: $('#bookingDate').val(),
                    fromDate: $('#fromDate').val(),
                    toDate: $('#toDate').val(),
                    shiftType: $('#shiftType').val(),
                    dateWiseShifts: Object.keys(dateWiseShifts).length > 0 ? JSON.stringify(dateWiseShifts) : null,
                    bookingStatus: $('#bookingStatus').val(),
                    totalAmount: parseFloat($('#totalAmount').val()),
                    advancePayment: parseFloat($('#advancePayment').val()) || 0,
                    remainingPayment: parseFloat($('#remainingPayment').val()),
                    paymentStatus: $('#paymentStatus').val(),
                    createdDate: $('#createdDate').val() || new Date().toISOString().split('T')[0],
                    customerName: $('#customerName').val(),
                    phoneNumber: $('#phoneNumber').val(),
                    alternativeNumber: $('#alternativeNumber').val(),
                    address: $('#address').val()
                };

                // Send data to API
                $.ajax({
                    url: `/EventBooking/AddOrUpdateEventBooking`,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(bookingData),
                    success: function (response) {
                        // Hide spinner
                        $('#spinner').hide();

                        if (response.success) {
                            // Show success message
                            showMessage(isNewBooking ? 'Booking created successfully!' : 'Booking updated successfully!', 'success', 'modal-message');

                            // Reload calendar events
                            loadEvents();

                            // Close modal after a short delay
                            setTimeout(function() {
                                $('#bookingModal').hide();
                                resetBookingForm();
                            }, 1500);
                        } else {
                            showMessage('Error: ' + response.message, 'error', 'modal-message');
                        }
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error saving booking: ' + xhr.responseText, 'error', 'modal-message');
                    }
                });
            }

            // Function to delete booking
            function deleteBooking(bookingId) {
                // Show spinner
                $('#spinner').show();

                $.ajax({
                    url: `/EventBooking/DeleteBooking`,
                    type: 'DELETE',
                    data: { id: bookingId },
                    success: function (response) {
                        // Hide spinner
                        $('#spinner').hide();

                        if (response.success) {
                            // Show success message
                            showMessage('Booking deleted successfully!', 'success');

                            // Reload calendar events
                            loadEvents();

                            // Close modal
                            $('#bookingModal').hide();
                            resetBookingForm();
                        } else {
                            showMessage('Error: ' + response.message, 'error', 'modal-message');
                        }
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error deleting booking: ' + xhr.responseText, 'error', 'modal-message');
                    }
                });
            }

            // Function to load events for calendar
            function loadEvents() {
                // Show spinner
                $('#spinner').show();

                $.ajax({
                    url: '/EventBooking/GetAllEventBookings',
                    type: 'GET',
                    success: function (bookings) {
                        // Clear existing events
                        calendar.removeAllEvents();

                        // Add new events
                        bookings.forEach(function (booking) {
                            const eventColor = getEventColor(booking.eventId, booking.bookingStatus);
                            const title = `${getEventName(booking.eventId)} - ${booking.customerName}`;

                            // Determine if it's a multi-day event or a single day with shifts
                            if (booking.fromDate === booking.toDate) {
                                // Single day event
                                let eventShifts = [];

                                if (booking.shiftType === 'fullday') {
                                    eventShifts.push({
                                        id: booking.id,
                                        title: title,
                                        start: booking.fromDate,
                                        backgroundColor: eventColor,
                                        borderColor: eventColor,
                                        textColor: '#ffffff',
                                        allDay: true
                                    });
                                } else if (booking.dateWiseShifts) {
                                    try {
                                        const dateWiseShifts = JSON.parse(booking.dateWiseShifts);
                                        const dateStr = booking.fromDate;

                                        if (dateStr in dateWiseShifts) {
                                            const shifts = dateWiseShifts[dateStr];
                                            shifts.forEach(shift => {
                                                const shiftTitle = `${title} (${capitalizeFirstLetter(shift)})`;
                                                eventShifts.push({
                                                    id: booking.id,
                                                    title: shiftTitle,
                                                    start: dateStr,
                                                    backgroundColor: eventColor,
                                                    borderColor: eventColor,
                                                    textColor: '#ffffff',
                                                    allDay: true
                                                });
                                            });
                                        }
                                    } catch (e) {
                                        console.error("Error parsing dateWiseShifts:", e);
                                        eventShifts.push({
                                            id: booking.id,
                                            title: `${title} (${capitalizeFirstLetter(booking.shiftType)})`,
                                            start: booking.fromDate,
                                            backgroundColor: eventColor,
                                            borderColor: eventColor,
                                            textColor: '#ffffff',
                                            allDay: true
                                        });
                                    }
                                } else {
                                    eventShifts.push({
                                        id: booking.id,
                                        title: `${title} (${capitalizeFirstLetter(booking.shiftType)})`,
                                        start: booking.fromDate,
                                        backgroundColor: eventColor,
                                        borderColor: eventColor,
                                        textColor: '#ffffff',
                                        allDay: true
                                    });
                                }

                                // Add all shift events to calendar
                                eventShifts.forEach(eventShift => {
                                    calendar.addEvent(eventShift);
                                });
                            } else {
                                // Multi-day event
                                if (booking.shiftType === 'fullday') {
                                    // For full day events that span multiple days
                                    calendar.addEvent({
                                        id: booking.id,
                                        title: title,
                                        start: booking.fromDate,
                                        end: new Date(new Date(booking.toDate).getTime() + 86400000), // Add one day to include the end date
                                        backgroundColor: eventColor,
                                        borderColor: eventColor,
                                        textColor: '#ffffff',
                                        allDay: true
                                    });
                                } else if (booking.dateWiseShifts) {
                                    // For events with specific shifts on specific days
                                    try {
                                        const dateWiseShifts = JSON.parse(booking.dateWiseShifts);

                                        Object.entries(dateWiseShifts).forEach(([dateStr, shifts]) => {
                                            shifts.forEach(shift => {
                                                const shiftTitle = `${title} (${capitalizeFirstLetter(shift)})`;
                                                calendar.addEvent({
                                                    id: booking.id,
                                                    title: shiftTitle,
                                                    start: dateStr,
                                                    backgroundColor: eventColor,
                                                    borderColor: eventColor,
                                                    textColor: '#ffffff',
                                                    allDay: true
                                                });
                                            });
                                        });
                                    } catch (e) {
                                        console.error("Error parsing dateWiseShifts:", e);
                                        // Fallback to showing full range if parsing fails
                                        calendar.addEvent({
                                            id: booking.id,
                                            title: `${title} (${capitalizeFirstLetter(booking.shiftType)})`,
                                            start: booking.fromDate,
                                            end: new Date(new Date(booking.toDate).getTime() + 86400000),
                                            backgroundColor: eventColor,
                                            borderColor: eventColor,
                                            textColor: '#ffffff',
                                            allDay: true
                                        });
                                    }
                                } else {
                                    // Default handling for multiple days with a single shift type
                                    calendar.addEvent({
                                        id: booking.id,
                                        title: `${title} (${capitalizeFirstLetter(booking.shiftType)})`,
                                        start: booking.fromDate,
                                        end: new Date(new Date(booking.toDate).getTime() + 86400000),
                                        backgroundColor: eventColor,
                                        borderColor: eventColor,
                                        textColor: '#ffffff',
                                        allDay: true
                                    });
                                }
                            }
                        });

                        // Hide spinner
                        $('#spinner').hide();
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error loading events: ' + xhr.responseText, 'error');
                    }
                });
            }

            // Function to load bookings list
            function loadBookingsList() {
                // Show spinner
                $('#spinner').show();

                $.ajax({
                    url: '/EventBooking/GetAllBookings',
                    type: 'GET',
                    success: function (bookings) {
                        // Clear existing rows
                        $('#event-list-body').empty();

                        // Add new rows
                        bookings.forEach(function (booking) {
                            const eventName = getEventName(booking.eventId);
                            const dateRange = `${formatDate(booking.fromDate)} to ${formatDate(booking.toDate)}`;
                            const shiftDisplay = booking.shiftType === 'fullday' ? 'Full Day' :
                                (booking.dateWiseShifts ? 'Multiple Shifts' : capitalizeFirstLetter(booking.shiftType));

                            const row = `
                                <tr>
                                    <td>${booking.id}</td>
                                    <td>${eventName}</td>
                                    <td>${booking.customerName}</td>
                                    <td>${dateRange}</td>
                                    <td>${shiftDisplay}</td>
                                    <td>${booking.bookingStatus}</td>
                                    <td>${booking.paymentStatus}</td>
                                    <td>
                                        <button class="view-booking-btn" data-id="${booking.id}">View</button>
                                        <button class="edit-booking-btn" data-id="${booking.id}">Edit</button>
                                    </td>
                                </tr>
                            `;

                            $('#event-list-body').append(row);
                        });

                        // Add event listeners for new buttons
                        $('.view-booking-btn').click(function() {
                            const bookingId = $(this).data('id');
                            viewBookingDetails(bookingId);
                        });

                        $('.edit-booking-btn').click(function() {
                            const bookingId = $(this).data('id');
                            openBookingModalForEdit(bookingId);
                        });

                        // Hide spinner
                        $('#spinner').hide();
                    },
                    error: function (xhr) {
                        $('#spinner').hide();
                        showMessage('Error loading bookings: ' + xhr.responseText, 'error');
                    }
                });
            }

            // Function to reset booking form
            function resetBookingForm() {
                // Clear form fields
                $('.ClearBookingModalData').val('');

                // Hide date-wise shift container
                $('#dateWiseShiftContainer').hide();

                // Clear date-wise shift container
                $('#dateWiseShiftContainer').empty();

                // Clear modal message
                $('#modal-message').empty();

                // Reset payment fields
                $('#totalAmount').val('');
                $('#advancePayment').val('');
                $('#remainingPayment').val('');

                // Reset user ID to default
                $('#userId').val('1');
            }

            // Helper function to format date for display
            function formatDate(dateStr) {
                if (!dateStr) return '';
                const date = new Date(dateStr);
                return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}/${date.getFullYear()}`;
            }

            // Helper function to format date for input fields
            function formatDateForInput(dateStr) {
                if (!dateStr) return '';
                const date = new Date(dateStr);
                return date.toISOString().split('T')[0];
            }

            // Helper function to get event name by ID
            function getEventName(eventId) {
                const events = {
                    1: 'Birthday Party',
                    2: 'Wedding',
                    3: 'Corporate Event',
                    4: 'Family Gathering'
                };

                return events[eventId] || 'Unknown Event';
            }

            // Helper function to get event color based on event ID and status
            function getEventColor(eventId, status) {
                // First check status
                if (status === 'Cancelled') {
                    return '#FF0000'; // Red for cancelled
                }

                if (status === 'Pending') {
                    return '#FFA500'; // Orange for pending
                }

                // Then use event type colors for confirmed bookings
                const eventColors = {
                    1: '#4CAF50', // Green for Birthday Party
                    2: '#2196F3', // Blue for Wedding
                    3: '#9C27B0', // Purple for Corporate Event
                    4: '#FF9800'  // Orange for Family Gathering
                };

                return eventColors[eventId] || '#607D8B'; // Default gray
            }

            // Helper function to capitalize first letter
            function capitalizeFirstLetter(string) {
                if (!string) return '';
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            // Function to show messages
            function showMessage(message, type = 'success', targetId = 'message') {
                const target = $(`#${targetId}`);
                target.html(message);
                target.removeClass('success-message error-message');
                target.addClass(type === 'success' ? 'success-message' : 'error-message');
                target.show();

                // Auto-hide message after 5 seconds unless it's in the modal
                if (targetId !== 'modal-message') {
                    setTimeout(function() {
                        target.hide();
                    }, 5000);
                }
            }
        });
    </script>

    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        h1 {
            color: #333;
            text-align: center;
        }

        /* Calendar Styles */
        #calendar {
            max-width: 90%;
            margin: 20px auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        /* Form Styles */
        #booking-form {
            max-width: 500px;
            margin: 20px auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        input, select, textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        textarea {
            height: 100px;
            resize: vertical;
        }

        button {
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            button:hover {
                background-color: #45a049;
            }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 700px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .modal-footer {
            border-top: 1px solid #ddd;
            padding-top: 15px;
            margin-top: 20px;
            text-align: right;
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

            .close-button:hover {
                color: black;
            }

        /* Detail View Styles */
        .booking-details {
            margin-bottom: 20px;
        }

        .detail-row {
            display: flex;
            margin-bottom: 10px;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }

        .detail-label {
            font-weight: bold;
            width: 150px;
            flex-shrink: 0;
        }

        .detail-value {
            flex-grow: 1;
        }

        /* Shift Selection Styles */
        .shift-row {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

            .shift-row label {
                margin-right: 15px;
            }

            .shift-row input[type="checkbox"] {
                width: auto;
                margin-right: 5px;
            }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background-color: white;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        /* Button Styles */
        .btn {
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            border: none;
            color: white;
            font-weight: bold;
        }

        .btn-primary {
            background-color: #4CAF50;
        }

        .btn-secondary {
            background-color: #607D8B;
        }

        .btn-danger {
            background-color: #F44336;
        }

        /* Message Styles */
        .success-message, .error-message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            text-align: center;
        }

        .success-message {
            background-color: #dff0d8;
            color: #3c763d;
            border: 1px solid #d6e9c6;
        }

        .error-message {
            background-color: #f2dede;
            color: #a94442;
            border: 1px solid #ebccd1;
        }

        /* Spinner */
        .spinner {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 50px;
            height: 50px;
            border: 5px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #4CAF50;
            animation: spin 1s ease-in-out infinite;
            z-index: 1100;
        }

        @@keyframes spin {
            to

        {
            transform: translate(-50%, -50%) rotate(360deg);
        }

        }

        /* Responsive Adjustments */
        @@media (max-width: 768px) {
            .modal-content

        {
            width: 95%;
            margin: 5% auto;
        }

        .detail-row {
            flex-direction: column;
        }

        .detail-label {
            width: 100%;
            margin-bottom: 5px;
        }

        .shift-row {
            flex-wrap: wrap;
        }

        }
    </style>
</body>
</html>