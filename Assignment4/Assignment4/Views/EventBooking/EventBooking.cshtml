<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Booking Calendar</title>

    <!-- jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- jQuery UI -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

    <!-- FullCalendar v6 -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>


    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }

        h1 {
            margin-bottom: 20px;
        }

        #calendar {
            width: 90%;
            margin: 20px auto;
        }

        /* Buttons styling */
        button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
        }

            button:hover {
                background-color: #0056b3;
            }

        /* Custom styling for day cells */
        .fc-daygrid-day {
            position: relative;
        }

        .day-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .morning-part {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 50%;
        }

        .evening-part {
            position: absolute;
            top: 50%;
            left: 0;
            width: 100%;
            height: 50%;
        }

        .morning-booked {
            background-color: #FF9999;
            opacity: 0.5;
        }

        .evening-booked {
            background-color: #99FF99;
            opacity: 0.5;
        }

        .fullday-booked {
            background-color: #9999FF;
            opacity: 0.5;
        }

        /* Make sure day numbers remain visible */
        .fc-daygrid-day-top {
            position: relative;
            z-index: 2;
        }

        /* Booking form styling */
        #booking-form {
            width: 350px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: left;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        input[type="text"],
        input[type="date"],
        input[type="number"],
        select,
        textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        #confirm-booking {
            background-color: #28a745;
            width: 100%;
            margin-top: 10px;
        }

            #confirm-booking:hover {
                background-color: #218838;
            }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 90%;
            max-width: 500px;
            border-radius: 8px;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }

            .modal-header h2 {
                margin: 0;
                font-size: 20px;
            }

        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

            .close-button:hover,
            .close-button:focus {
                color: #000;
                text-decoration: none;
            }

        .modal-body {
            margin-bottom: 15px;
            max-height: 60vh;
            overflow-y: auto;
        }

            .modal-body label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }

            .modal-body input[type="text"],
            .modal-body input[type="number"],
            .modal-body input[type="date"],
            .modal-body select,
            .modal-body textarea {
                width: 100%;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                box-sizing: border-box;
                margin-bottom: 10px;
            }

            .modal-body textarea {
                resize: vertical;
            }

        .modal-footer {
            text-align: right;
        }

            .modal-footer button {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
            }

            .modal-footer .btn-primary {
                background-color: #007BFF;
                color: white;
                margin-right: 10px;
            }

                .modal-footer .btn-primary:hover {
                    background-color: #0056b3;
                }

            .modal-footer .btn-secondary {
                background-color: #e9ecef;
                color: #495057;
            }

                .modal-footer .btn-secondary:hover {
                    background-color: #d3d9df;
                }

            .modal-footer .btn-danger {
                background-color: #dc3545;
                color: white;
            }

                .modal-footer .btn-danger:hover {
                    background-color: #c82333;
                }

        .selected-day {
            background-color: #e6f2ff !important;
        }

        /* Loading spinner */
        .spinner {
            display: none;
            margin: 0 auto;
            width: 50px;
            height: 50px;
            border: 3px solid #f3f3f3;
            border-radius: 50%;
            border-top: 3px solid #3498db;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Tooltip styling */
        .booking-tooltip {
            position: absolute;
            background-color: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            z-index: 100;
            display: none;
        }

        /* Error message styling */
        .error-message {
            color: red;
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: green;
            margin-top: 5px;
            font-size: 14px;
        }

        .shift-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .shift-row label {
                margin-right: 10px;
                min-width: 100px;
            }

                .shift-row label:not(:first-child) {
                    margin-right: 15px;
                    display: inline-flex;
                    align-items: center;
                    min-width: auto;
                }

            .shift-row input[type="checkbox"] {
                margin-right: 5px;
            }

        /* Event styles in calendar */
        .fc-event {
            cursor: pointer;
        }

        .event-morning {
            background-color: #FF9999 !important;
            border-color: #FF6666 !important;
        }

        .event-evening {
            background-color: #99FF99 !important;
            border-color: #66FF66 !important;
        }

        .event-fullday {
            background-color: #9999FF !important;
            border-color: #6666FF !important;
        }

        /* Event list styles */
        #event-list {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
        }

            #event-list th, #event-list td {
                padding: 10px;
                text-align: left;
                border: 1px solid #ddd;
            }

            #event-list th {
                background-color: #f2f2f2;
            }

            #event-list tr:nth-child(even) {
                background-color: #f9f9f9;
            }

            #event-list tr:hover {
                background-color: #e6f2ff;
            }

        .action-buttons button {
            padding: 5px 10px;
            margin: 0 5px;
            font-size: 14px;
        }

        .action-buttons .edit-btn {
            background-color: #ffc107;
            color: #212529;
        }

        .action-buttons .delete-btn {
            background-color: #dc3545;
        }

        /* View Details Modal */
        #detailsModal .booking-details {
            text-align: left;
            margin-bottom: 20px;
        }

        #detailsModal .detail-row {
            display: flex;
            margin-bottom: 8px;
        }

        #detailsModal .detail-label {
            font-weight: bold;
            width: 170px;
        }

        #detailsModal .detail-value {
            flex: 1;
        }
    </style>
</head>
<body>

    <h1>Event Booking Calendar</h1>

    <!-- Booking Modal -->
    <div id="bookingModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="booking-modal-title">Add New Booking</h2>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <div class="form-group" hidden>
                    <label>Booking ID</label>
                    <input type="number" id="bookingId" class="ClearBookingModalData" />
                </div>
                <div class="form-group" hidden>
                    <input type="number" id="userId" class="ClearBookingModalData" value="1" />
                </div>
                <div class="form-group">
                    <label>Event</label>
                    <select id="eventId" class="ClearBookingModalData" required>
                        <option value="">-- Select Event --</option>
                        <option value="1">Birthday Party</option>
                        <option value="2">Wedding</option>
                        <option value="3">Corporate Event</option>
                        <option value="4">Family Gathering</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Booking Date</label>
                    <input type="date" id="bookingDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>From Date</label>
                    <input type="date" id="fromDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>To Date</label>
                    <input type="date" id="toDate" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Shift Type</label>
                    <select id="shiftType" class="ClearBookingModalData" required>
                        <option value="">-- Select Shift --</option>
                        <option value="morning">Morning</option>
                        <option value="evening">Evening</option>
                        <option value="fullday">Full Day</option>
                    </select>
                </div>
                <div id="dateWiseShiftContainer">
                    <!-- Will be filled dynamically -->
                </div>
                <div class="form-group">
                    <label>Booking Status</label>
                    <select id="bookingStatus" class="ClearBookingModalData" required>
                        <option value="">-- Select Status --</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Pending">Pending</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Total Amount</label>
                    <input type="number" id="totalAmount" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Advance Payment</label>
                    <input type="number" id="advancePayment" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Remaining Payment</label>
                    <input type="number" id="remainingPayment" class="ClearBookingModalData" readonly />
                </div>
                <div class="form-group">
                    <label>Payment Status</label>
                    <select id="paymentStatus" class="ClearBookingModalData" required>
                        <option value="">-- Select Payment Status --</option>
                        <option value="Paid">Paid</option>
                        <option value="Partially Paid">Partially Paid</option>
                        <option value="Pending">Pending</option>
                    </select>
                </div>
                <div class="form-group" hidden>
                    <label>Created Date</label>
                    <input type="date" id="createdDate" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Customer Name</label>
                    <input type="text" id="customerName" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Phone Number</label>
                    <input type="text" id="phoneNumber" class="ClearBookingModalData" required />
                </div>
                <div class="form-group">
                    <label>Alternative Number</label>
                    <input type="text" id="alternativeNumber" class="ClearBookingModalData" />
                </div>
                <div class="form-group">
                    <label>Address</label>
                    <textarea id="address" class="ClearBookingModalData"></textarea>
                </div>
                <div id="modal-message" class="success-message"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="save-booking" class="btn btn-primary">Save</button>
                <button type="button" id="delete-booking" class="btn btn-danger" style="display: none;">Delete</button>
                <button type="button" id="close-booking-modal" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>

    <!-- View Details Modal -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Booking Details</h2>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <div class="booking-details">
                    <!-- Will be filled dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="edit-from-details" class="btn btn-primary">Edit</button>
                <button type="button" id="close-details-modal" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>

    <!-- Quick Booking Form -->
    <div id="booking-form">
        <h3>Quick Booking</h3>
        <div class="form-group">
            <label for="booking-date">Select Date:</label>
            <input type="text" id="booking-date" placeholder="Click to select date" readonly>
        </div>
        <div class="form-group">
            <label for="booking-shift">Select Shift:</label>
            <select id="booking-shift">
                <option value="">-- Select Shift --</option>
                <option value="morning">Morning</option>
                <option value="evening">Evening</option>
                <option value="fullday">Full Day</option>
            </select>
        </div>
        <button id="quick-book">Quick Book</button>
    </div>

    <!-- Action Buttons -->
    <div>
        <button id="fetch-bookings">Refresh Calendar</button>
        <button id="open-booking-modal">New Booking</button>
        <button id="view-all-bookings">View All Bookings</button>
    </div>

    <div id="spinner" class="spinner"></div>
    <div id="message" class="success-message"></div>

    <!-- Calendar Display -->
    <div id="calendar"></div>

    <!-- Bookings List Table (initially hidden) -->
    <div id="bookings-list-container" style="display: none;">
        <h2>All Bookings</h2>
        <table id="event-list">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Event</th>
                    <th>Customer</th>
                    <th>Date Range</th>
                    <th>Shift</th>
                    <th>Status</th>
                    <th>Payment</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="event-list-body">
                <!-- Will be filled dynamically -->
            </tbody>
        </table>
        <button id="back-to-calendar">Back to Calendar</button>
    </div>
    <!-- jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- jQuery UI -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

    <!-- FullCalendar -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>


    <script>
        $(document).ready(function ()
        {
            // Initialize storage for bookings if it doesn't exist
            if (!localStorage.getItem('bookings')) {
                localStorage.setItem('bookings', JSON.stringify([]));
            }

            // Initialize booking counter (for IDs)
            if (!localStorage.getItem('bookingCounter')) {
                localStorage.setItem('bookingCounter', '1');
            }

            // Initialize FullCalendar
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                selectable: true,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,dayGridWeek'
                },
                dateClick: function (info) {
                    // Set the selected date in the quick booking form
                    $('#booking-date').val(info.dateStr);

                    // Also set this date in the booking modal
                    let currentDate = new Date(info.dateStr);
                    let formattedDate = currentDate.toISOString().split('T')[0];
                    openBookingModal(formattedDate);
                },
                eventClick: function(info) {
                    // Get the booking ID from the event
                    const bookingId = info.event.id;
                    viewBookingDetails(bookingId);
                },
                events: [] // Will be populated by loadEvents
            });
            calendar.render();

            // Load initial events
            loadEvents();

            // Initialize jQuery UI Datepicker for the quick booking form
            $('#booking-date').datepicker({
                dateFormat: 'yy-mm-dd',
                onSelect: function(dateText) {
                    // When a date is selected in the datepicker, also set it in the booking modal
                    $('#bookingDate').val(dateText);
                    $('#fromDate').val(dateText);
                    $('#toDate').val(dateText);
                }
            });

            // Event listeners for date inputs in booking modal
            $('#bookingDate, #fromDate, #toDate').change(function() {
                // When dates change, maybe need to regenerate shift options
                if ($('#shiftType').val() !== 'fullday' && $('#fromDate').val() && $('#toDate').val()) {
                    generateDateWiseShifts();
                }
            });

            // Event listener for shift type change
            $('#shiftType').change(function() {
                const shiftType = $(this).val();
                if (shiftType === 'fullday') {
                    $('#dateWiseShiftContainer').hide();
                } else if (shiftType && $('#fromDate').val() && $('#toDate').val()) {
                    $('#dateWiseShiftContainer').show();
                    generateDateWiseShifts();
                }
            });

            // Event listeners for payment calculation
            $('#totalAmount, #advancePayment').on('input', function() {
                calculateRemainingPayment();
            });

            // Function to calculate remaining payment
            function calculateRemainingPayment() {
                const total = parseFloat($('#totalAmount').val()) || 0;
                const advance = parseFloat($('#advancePayment').val()) || 0;
                const remaining = total - advance;
                $('#remainingPayment').val(remaining >= 0 ? remaining : 0);

                // Auto-update payment status based on values
                if (advance === 0) {
                    $('#paymentStatus').val('Pending');
                } else if (advance >= total) {
                    $('#paymentStatus').val('Paid');
                } else {
                    $('#paymentStatus').val('Partially Paid');
                }
            }

            // Quick book button click
            $('#quick-book').click(function() {
                const selectedDate = $('#booking-date').val();
                const selectedShift = $('#booking-shift').val();

                if (!selectedDate) {
                    showMessage('Please select a date first.', 'error');
                    return;
                }

                if (!selectedShift) {
                    showMessage('Please select a shift.', 'error');
                    return;
                }

                // Open booking modal with pre-filled values
                openBookingModal(selectedDate, {
                    shiftType: selectedShift,
                    fromDate: selectedDate,
                    toDate: selectedDate
                });
            });

            // Open booking modal button click
            $('#open-booking-modal').click(function() {
                openBookingModal();
            });

            // Save booking button click
            $('#save-booking').click(function() {
                if (validateBookingForm()) {
                    saveBooking();
                }
            });

            // Delete booking button click
            $('#delete-booking').click(function() {
                const bookingId = $('#bookingId').val();
                if (bookingId) {
                    if (confirm('Are you sure you want to delete this booking?')) {
                        deleteBooking(bookingId);
                    }
                }
            });

            // View all bookings button click
            $('#view-all-bookings').click(function() {
                $('#calendar').hide();
                $('#booking-form').hide();
                loadBookingsList();
                $('#bookings-list-container').show();
            });

            // Back to calendar button click
            $('#back-to-calendar').click(function() {
                $('#bookings-list-container').hide();
                $('#calendar').show();
                $('#booking-form').show();
            });

            // Refresh calendar button click
            $('#fetch-bookings').click(function() {
                loadEvents();
                showMessage('Calendar refreshed.', 'success');
            });

            // Edit from details modal
            $('#edit-from-details').click(function() {
                const bookingId = $(this).data('booking-id');
                $('#detailsModal').hide();
                openBookingModalForEdit(bookingId);
            });

            // Close booking modal
            $('#close-booking-modal, .close-button').click(function() {
                $('#bookingModal').hide();
            });

            // Close details modal
            $('#close-details-modal, #detailsModal .close-button').click(function() {
                $('#detailsModal').hide();
            });

            // Function to generate date-wise shift inputs
            function generateDateWiseShifts() {
                const fromDateStr = $('#fromDate').val();
                const toDateStr = $('#toDate').val();
                const container = $('#dateWiseShiftContainer');

                if (!fromDateStr || !toDateStr) return;

                const fromDate = new Date(fromDateStr);
                const toDate = new Date(toDateStr);

                if (fromDate > toDate) {
                    showMessage('From Date must be before or equal to To Date.', 'error');
                    return;
                }

                container.empty();

                // Add header for the shift selection
                container.append('<h4>Select Shifts for Each Date:</h4>');

                const shiftTypes = ['Morning', 'Evening'];
                const currentDate = new Date(fromDate);

                // For each date in the range
                while (currentDate <= toDate) {
                    const dateStr = currentDate.toISOString().split('T')[0];
                    const shiftRow = $('<div class="shift-row"></div>');

                    // Add date label
                    const dateParts = dateStr.split('-');
                    const formattedDate = `${dateParts[1]}/${dateParts[2]}/${dateParts[0]}`;
                    shiftRow.append(`<label>${formattedDate}</label>`);

                    // Add checkboxes for each shift type
                    shiftTypes.forEach(shift => {
                        const checkbox = $(`
                            <label>
                                <input type="checkbox" name="shifts[${dateStr}]" value="${shift.toLowerCase()}"> ${shift}
                            </label>
                        `);
                        shiftRow.append(checkbox);
                    });

                    container.append(shiftRow);

                    // Move to next day
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            }

            // Function to open booking modal for new booking or with specific date
            function openBookingModal(dateStr = '', prefillData = {}) {
                // Reset form
                resetBookingForm();

                // Set modal title for new booking
                $('#booking-modal-title').text('Add New Booking');

                // Hide delete button for new bookings
                $('#delete-booking').hide();

                // Set today as default for booking date if not specified
                const today = new Date().toISOString().split('T')[0];
                $('#bookingDate').val(dateStr || today);
                $('#fromDate').val(dateStr || today);
                $('#toDate').val(dateStr || today);

                // Set created date
                $('#createdDate').val(today);

                // Prefill data if provided
                if (prefillData) {
                    for (const [key, value] of Object.entries(prefillData)) {
                        $(`#${key}`).val(value);
                    }

                    // If shift type is specified, maybe need to show date-wise shifts
                    if (prefillData.shiftType && prefillData.shiftType !== 'fullday' &&
                        $('#fromDate').val() && $('#toDate').val()) {
                        generateDateWiseShifts();
                    }
                }

                // Show the modal
                $('#bookingModal').show();
            }

            // Function to open booking modal for editing
            function openBookingModalForEdit(bookingId) {
                // Get booking data
                const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
                const booking = bookings.find(b => b.id == bookingId);

                if (!booking) {
                    showMessage('Booking not found.', 'error');
                    return;
                }

                // Reset form first
                resetBookingForm();

                // Set modal title for editing
                $('#booking-modal-title').text('Edit Booking');

                // Show delete button for existing bookings
                $('#delete-booking').show();

                // Fill form with booking data
                $('#bookingId').val(booking.id);
                $('#userId').val(booking.userId || 1);
                $('#eventId').val(booking.eventId);
                $('#bookingDate').val(booking.bookingDate);
                $('#fromDate').val(booking.fromDate);
                $('#toDate').val(booking.toDate);
                $('#shiftType').val(booking.shiftType);
                $('#bookingStatus').val(booking.bookingStatus);
                $('#totalAmount').val(booking.totalAmount);
                $('#advancePayment').val(booking.advancePayment);
                $('#remainingPayment').val(booking.remainingPayment);
                $('#paymentStatus').val(booking.paymentStatus);
                $('#createdDate').val(booking.createdDate);
                $('#customerName').val(booking.customerName);
                $('#phoneNumber').val(booking.phoneNumber);
                $('#alternativeNumber').val(booking.alternativeNumber);
                $('#address').val(booking.address);

                // If it's not a full day shift and we have a date range, generate shift selections
                if (booking.shiftType !== 'fullday') {
                    generateDateWiseShifts();

                    // Check the corresponding shift checkboxes
                    if (booking.dateWiseShifts) {
                        setTimeout(() => {
                            Object.entries(booking.dateWiseShifts).forEach(([date, shifts]) => {
                                shifts.forEach(shift => {
                                    $(`input[name="shifts[${date}]"][value="${shift}"]`).prop('checked', true);
                                });
                            });
                        }, 100); // Small delay to ensure DOM is ready
                    }
                }

                // Show the modal
                $('#bookingModal').show();
            }

            // Function to view booking details
            function viewBookingDetails(bookingId) {
                // Get booking data
                const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
                const booking = bookings.find(b => b.id == bookingId);

                if (!booking) {
                    showMessage('Booking not found.', 'error');
                    return;
                }

                // Get event name
                const eventName = getEventName(booking.eventId);

                // Prepare the detail content
                let detailsHTML = `
                    <div class="detail-row">
                        <div class="detail-label">Event Type:</div>
                        <div class="detail-value">${eventName}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Customer:</div>
                        <div class="detail-value">${booking.customerName}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Contact:</div>
                        <div class="detail-value">${booking.phoneNumber}</div>
                    </div>`;

                if (booking.alternativeNumber) {
                    detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Alternative Contact:</div>
                        <div class="detail-value">${booking.alternativeNumber}</div>
                    </div>`;
                }

                detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Booking Date:</div>
                        <div class="detail-value">${formatDate(booking.bookingDate)}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Date Range:</div>
                        <div class="detail-value">${formatDate(booking.fromDate)} to ${formatDate(booking.toDate)}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Shift Type:</div>
                        <div class="detail-value">${capitalizeFirstLetter(booking.shiftType)}</div>
                    </div>`;

                // If there are date-wise shifts, show them
                if (booking.dateWiseShifts && Object.keys(booking.dateWiseShifts).length > 0) {
                    detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Selected Shifts:</div>
                        <div class="detail-value">`;

                    Object.entries(booking.dateWiseShifts).forEach(([date, shifts]) => {
                        detailsHTML += `${formatDate(date)}: ${shifts.map(s => capitalizeFirstLetter(s)).join(', ')}<br>`;
                    });

                    detailsHTML += `</div>
                    </div>`;
                }

                detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Booking Status:</div>
                        <div class="detail-value">${booking.bookingStatus}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Total Amount:</div>
                        <div class="detail-value">${booking.totalAmount}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Advance Payment:</div>
                        <div class="detail-value">${booking.advancePayment || '0'}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Remaining Payment:</div>
                        <div class="detail-value">${booking.remainingPayment}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Payment Status:</div>
                        <div class="detail-value">${booking.paymentStatus}</div>
                    </div>`;

                if (booking.address) {
                    detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Address:</div>
                        <div class="detail-value">${booking.address}</div>
                    </div>`;
                }

                // Add created date if available
                if (booking.createdDate) {
                    detailsHTML += `
                    <div class="detail-row">
                        <div class="detail-label">Booking Created:</div>
                        <div class="detail-value">${formatDate(booking.createdDate)}</div>
                    </div>`;
                }

                // Set the details content
                $('#detailsModal .booking-details').html(detailsHTML);

                // Set the booking ID for the edit button
                $('#edit-from-details').data('booking-id', booking.id);

                // Show the modal
                $('#detailsModal').show();
            }

            // Function to validate booking form
            function validateBookingForm() {
                // Required fields
                const requiredFields = [
                    { id: 'eventId', name: 'Event' },
                    { id: 'bookingDate', name: 'Booking Date' },
                    { id: 'fromDate', name: 'From Date' },
                    { id: 'toDate', name: 'To Date' },
                    { id: 'shiftType', name: 'Shift Type' },
                    { id: 'bookingStatus', name: 'Booking Status' },
                    { id: 'totalAmount', name: 'Total Amount' },
                    { id: 'paymentStatus', name: 'Payment Status' },
                    { id: 'customerName', name: 'Customer Name' },
                    { id: 'phoneNumber', name: 'Phone Number' }
                ];

                for (const field of requiredFields) {
                    const value = $(`#${field.id}`).val();
                    if (!value || value.trim() === '') {
                        showMessage(`${field.name} is required.`, 'error', 'modal-message');
                        return false;
                    }
                }

                // Date validation
                const bookingDate = new Date($('#bookingDate').val());
                const fromDate = new Date($('#fromDate').val());
                const toDate = new Date($('#toDate').val());

                if (fromDate > toDate) {
                    showMessage('From Date must be before or equal to To Date.', 'error', 'modal-message');
                    return false;
                }

                if (bookingDate < fromDate || bookingDate > toDate) {
                    showMessage('Booking Date must be within the From and To Date range.', 'error', 'modal-message');
                    return false;
                }

                // Shift validation for non-full day bookings
                const shiftType = $('#shiftType').val();
                if (shiftType !== 'fullday') {
                    // Check if at least one shift is selected
                    const anyShiftSelected = $('#dateWiseShiftContainer input[type="checkbox"]:checked').length > 0;
                    if (!anyShiftSelected) {
                        showMessage('Please select at least one shift.', 'error', 'modal-message');
                        return false;
                    }
                }

                return true;
            }

            // Function to save booking
            function saveBooking() {
                const bookingId = $('#bookingId').val();
                const isNewBooking = !bookingId;

                // Collect all form data
                const bookingData = {
                    id: isNewBooking ? getNextBookingId() : bookingId,
                    userId: $('#userId').val() || 1,
                    eventId: $('#eventId').val(),
                    bookingDate: $('#bookingDate').val(),
                    fromDate: $('#fromDate').val(),
                    toDate: $('#toDate').val(),
                    shiftType: $('#shiftType').val(),
                    bookingStatus: $('#bookingStatus').val(),
                    totalAmount: parseFloat($('#totalAmount').val()),
                    advancePayment: parseFloat($('#advancePayment').val()) || 0,
                    remainingPayment: parseFloat($('#remainingPayment').val()),
                    paymentStatus: $('#paymentStatus').val(),
                    createdDate: $('#createdDate').val() || new Date().toISOString().split('T')[0],
                    customerName: $('#customerName').val(),
                    phoneNumber: $('#phoneNumber').val(),
                    alternativeNumber: $('#alternativeNumber').val(),
                    address: $('#address').val(),
                    dateWiseShifts: {}
                };

                // If not full day, collect shift selections
                if (bookingData.shiftType !== 'fullday') {
                    $('#dateWiseShiftContainer .shift-row').each(function() {
                        const dateLabel = $(this).find('label').first().text();
                        // Convert MM/DD/YYYY to YYYY-MM-DD
                        const dateParts = dateLabel.split('/');
                        const date = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`;

                        const selectedShifts = [];
                        $(this).find('input[type="checkbox"]:checked').each(function() {
                            selectedShifts.push($(this).val());
                        });

                        if (selectedShifts.length > 0) {
                            bookingData.dateWiseShifts[date] = selectedShifts;
                        }
                    });
                }

                // Get existing bookings
                const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');

                // Check for conflicts - make sure we don't double-book
                const overlappingBookings = bookings.filter(booking => {
                    // Skip the current booking if editing
                    if (!isNewBooking && booking.id == bookingId) {
                        return false;
                    }

                    // Check date overlap
                    const bookingFromDate = new Date(booking.fromDate);
                    const bookingToDate = new Date(booking.toDate);
                    const newFromDate = new Date(bookingData.fromDate);
                    const newToDate = new Date(bookingData.toDate);

                    // If dates don't overlap, no conflict
                    if (newToDate < bookingFromDate || newFromDate > bookingToDate) {
                        return false;
                    }

                    // If dates overlap, check for shift conflicts
                    // For full day bookings, any overlap is a conflict
                    if (booking.shiftType === 'fullday' || bookingData.shiftType === 'fullday') {
                        return true;
                    }

                    // Check date-wise shift conflicts
                    const currentDates = getDatesInRange(bookingData.fromDate, bookingData.toDate);
                    for (const date of currentDates) {
                        const dateStr = date.toISOString().split('T')[0];
                        const existingShifts = booking.dateWiseShifts && booking.dateWiseShifts[dateStr] || [];
                        const newShifts = bookingData.dateWiseShifts[dateStr] || [];

                        // Check if any shifts overlap
                        for (const shift of newShifts) {
                            if (existingShifts.includes(shift)) {
                                return true; // Conflict found
                            }
                        }
                    }

                    return false; // No conflicts
                });

                if (overlappingBookings.length > 0) {
                    showMessage('Booking conflict detected. Another booking exists for the selected date(s) and shift(s).', 'error', 'modal-message');
                    return;
                }

                // Save the booking
                if (isNewBooking) {
                    // Add new booking
                    bookings.push(bookingData);
                } else {
                    // Update existing booking
                    const index = bookings.findIndex(b => b.id == bookingId);
                    if (index !== -1) {
                        bookings[index] = bookingData;
                    }
                }

                // Save back to localStorage
                localStorage.setItem('bookings', JSON.stringify(bookings));

                // Refresh calendar
                loadEvents();

                // Show success message
                showMessage(
                    isNewBooking ? 'Booking created successfully.' : 'Booking updated successfully.',
                    'success',
                    'modal-message'
                );

                // Close the modal after a delay
                setTimeout(() => {
                    $('#bookingModal').hide();
                }, 1500);
            }

            // Function to delete booking
            function deleteBooking(bookingId) {
                // Get existing bookings
                let bookings = JSON.parse(localStorage.getItem('bookings') || '[]');

                // Remove the booking
                bookings = bookings.filter(b => b.id != bookingId);

                // Save back to localStorage
                localStorage.setItem('bookings', JSON.stringify(bookings));

                // Refresh calendar
                loadEvents();

                // Show success message
                showMessage('Booking deleted successfully.', 'success');

                // Close the modal
                $('#bookingModal').hide();
            }

            // Function to reset booking form
            function resetBookingForm() {
                $('.ClearBookingModalData').val('');
                $('#modal-message').text('').removeClass('error-message').addClass('success-message');
                $('#dateWiseShiftContainer').empty().hide();
            }

            // Function to load events into calendar
            function loadEvents() {
                // Clear existing events
                calendar.removeAllEvents();

                // Get bookings from localStorage
                const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');

                // Convert bookings to calendar events
                bookings.forEach(booking => {
                    // Skip cancelled bookings
                    if (booking.bookingStatus === 'Cancelled') {
                        return;
                    }

                    const eventName = getEventName(booking.eventId);

                    if (booking.shiftType === 'fullday') {
                        // Add a single event spanning the whole date range
                        calendar.addEvent({
                            id: booking.id,
                            title: `${eventName} - ${booking.customerName}`,
                            start: booking.fromDate,
                            end: new Date(new Date(booking.toDate).setDate(new Date(booking.toDate).getDate() + 1)).toISOString().split('T')[0], // Add one day for inclusive display
                            allDay: true,
                            className: 'event-fullday',
                            extendedProps: {
                                bookingId: booking.id,
                                customerName: booking.customerName,
                                phoneNumber: booking.phoneNumber,
                                shiftType: booking.shiftType
                            }
                        });
                    } else {
                        // Add events for each selected shift
                        Object.entries(booking.dateWiseShifts || {}).forEach(([date, shifts]) => {
                            shifts.forEach(shift => {
                                calendar.addEvent({
                                    id: booking.id,
                                    title: `${eventName} - ${capitalizeFirstLetter(shift)}`,
                                    start: date,
                                    allDay: true,
                                    className: `event-${shift}`,
                                    extendedProps: {
                                        bookingId: booking.id,
                                        customerName: booking.customerName,
                                        phoneNumber: booking.phoneNumber,
                                        shiftType: shift
                                    }
                                });
                            });
                        });
                    }
                });
            }

            // Function to load bookings list
            function loadBookingsList() {
                const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
                const tbody = $('#event-list-body');
                tbody.empty();

                if (bookings.length === 0) {
                    // Display a message when no bookings exist
                    tbody.append(`
                        <tr>
                            <td colspan="8" style="text-align: center;">No bookings found.</td>
                        </tr>
                    `);
                    return;
                }

                // Sort bookings by date (most recent first)
                bookings.sort((a, b) => new Date(b.bookingDate) - new Date(a.bookingDate));

                // Add each booking to the table
                bookings.forEach(booking => {
                    const eventName = getEventName(booking.eventId);

                    tbody.append(`
                        <tr>
                            <td>${booking.id}</td>
                            <td>${eventName}</td>
                            <td>${booking.customerName}</td>
                            <td>${formatDate(booking.fromDate)} to ${formatDate(booking.toDate)}</td>
                            <td>${capitalizeFirstLetter(booking.shiftType)}</td>
                            <td>${booking.bookingStatus}</td>
                            <td>${booking.paymentStatus}</td>
                            <td class="action-buttons">
                                <button class="view-btn" onclick="viewBookingDetails(${booking.id})">View</button>
                                <button class="edit-btn" onclick="openBookingModalForEdit(${booking.id})">Edit</button>
                                <button class="delete-btn" onclick="confirmDeleteBooking(${booking.id})">Delete</button>
                            </td>
                        </tr>
                    `);
                });
            }

            // Helper function to get the next booking ID
            function getNextBookingId() {
                const counter = parseInt(localStorage.getItem('bookingCounter') || '1');
                localStorage.setItem('bookingCounter', (counter + 1).toString());
                return counter;
            }

            // Helper function to get event name from ID
            function getEventName(eventId) {
                const events = {
                    '1': 'Birthday Party',
                    '2': 'Wedding',
                    '3': 'Corporate Event',
                    '4': 'Family Gathering'
                };
                return events[eventId] || 'Unknown Event';
            }

            // Helper function to format date: YYYY-MM-DD to MM/DD/YYYY
            function formatDate(dateStr) {
                if (!dateStr) return '';
                const date = new Date(dateStr);
                return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
            }

            // Helper function to capitalize first letter
            function capitalizeFirstLetter(string) {
                if (!string) return '';
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            // Helper function to get all dates between start and end
            function getDatesInRange(startDate, endDate) {
                const dates = [];
                const currentDate = new Date(startDate);
                const lastDate = new Date(endDate);

                while (currentDate <= lastDate) {
                    dates.push(new Date(currentDate));
                    currentDate.setDate(currentDate.getDate() + 1);
                }

                return dates;
            }

            // Function to show messages
            function showMessage(message, type = 'success', elementId = 'message') {
                const element = $(`#${elementId}`);
                element.text(message);

                if (type === 'error') {
                    element.removeClass('success-message').addClass('error-message');
                } else {
                    element.removeClass('error-message').addClass('success-message');
                }

                // Clear the message after 5 seconds
                setTimeout(() => {
                    element.text('');
                }, 5000);
            }

            // Make functions available globally for inline event handlers
            window.viewBookingDetails = function(bookingId) {
                viewBookingDetails(bookingId);
            };

            window.openBookingModalForEdit = function(bookingId) {
                openBookingModalForEdit(bookingId);
            };

            window.confirmDeleteBooking = function(bookingId) {
                if (confirm('Are you sure you want to delete this booking?')) {
                    deleteBooking(bookingId);
                    loadBookingsList(); // Refresh the list after deletion
                }
            };
        });
    </script>
</body>
</html>