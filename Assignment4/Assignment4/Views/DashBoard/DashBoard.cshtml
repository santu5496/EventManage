<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upcoming Bookings</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap 5 & Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .status-paid {
            color: green;
            font-weight: bold;
        }

        .status-partial {
            color: orange;
            font-weight: bold;
        }

        .status-pending {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <div class="container mt-4">
        <h2 class="mb-4"><i class="bi bi-calendar-range-fill text-primary me-2"></i> Upcoming Bookings</h2>

        <div class="btn-group mb-4" role="group">
            <button class="filter-btn btn btn-outline-primary" data-days="2">Next 2 Days</button>
            <button class="filter-btn btn btn-outline-info" data-days="7">Next 7 Days</button>
            <button class="filter-btn btn btn-outline-success" data-days="30">Next 30 Days</button>
        </div>

        <div id="upcoming-events-list" class="row"></div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(function () {
            function formatDate(dateStr) {
                const d = new Date(dateStr);
                return `${String(d.getDate()).padStart(2, '0')}/${String(d.getMonth() + 1).padStart(2, '0')}/${d.getFullYear()}`;
            }

            function formatTimeTo12Hour(timeStr) {
                if (!timeStr) return '--';
                const [h, m] = timeStr.split(':');
                const d = new Date();
                d.setHours(+h);
                d.setMinutes(+m);
                return d.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
            }

            function capitalize(str) {
                return str.charAt(0).toUpperCase() + str.slice(1);
            }

            function getEventName(eventId) {
                const events = {
                    1: 'Wedding',
                    2: 'Corporate Event',
                    3: 'Birthday Party'
                };
                return events[eventId] || 'Unknown Event';
            }

            function getPaymentStatusClass(status) {
                switch (status?.toLowerCase()) {
                    case 'paid': return 'status-paid';
                    case 'partially paid': return 'status-partial';
                    default: return 'status-pending';
                }
            }

            function formatShifts(booking) {
                if (!booking.dateWiseShifts) {
                    return `<div class="text-secondary ms-2">🕐 ${capitalize(booking.shiftType || 'Full Day')}</div>`;
                }
                let html = '';
                try {
                    const parsed = JSON.parse(booking.dateWiseShifts);
                    Object.entries(parsed).forEach(([date, shifts]) => {
                        const shiftDetails = shifts.map(s => {
                            if (typeof s === 'string') return capitalize(s);
                            const start = formatTimeTo12Hour(s.startTime);
                            const end = formatTimeTo12Hour(s.endTime);
                            return `${capitalize(s.shift)} (${start} - ${end})`;
                        }).join(', ');
                        html += `<div class="ms-2"><i class="bi bi-calendar"></i> ${formatDate(date)}: ${shiftDetails}</div>`;
                    });
                } catch {
                    html = '<div class="text-danger">Invalid shift data</div>';
                }
                return html;
            }

            function loadUpcomingEvents(daysAhead) {
                const now = new Date();
                const future = new Date();
                future.setDate(future.getDate() + daysAhead);

                $.get('/EventBooking/GetAllEventBookings', function (bookings) {
                    const filtered = bookings.filter(bk => {
                        const from = new Date(bk.fromDate || bk.createdDate);
                        return from >= now && from <= future;
                    });

                    const container = $('#upcoming-events-list').empty();

                    if (!filtered.length) {
                        container.html('<p class="text-muted">No upcoming bookings found for this range.</p>');
                        return;
                    }

                    filtered.sort((a, b) => new Date(a.fromDate) - new Date(b.fromDate));

                    filtered.forEach(bk => {
                        const from = new Date(bk.fromDate);
                        const to = new Date(bk.toDate || bk.fromDate);
                        const dateRange = formatDate(from) + (from.getTime() !== to.getTime() ? ' → ' + formatDate(to) : '');

                        const card = `
                            <div class="col-md-6 mb-4">
                                <div class="card shadow-sm border-start border-primary border-4 rounded-4 h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">${bk.customerName} <small class="text-muted">(${bk.phoneNumber || 'N/A'})</small></h5>
                                        <p class="mb-1"><i class="bi bi-briefcase-fill text-danger"></i> ${getEventName(bk.eventId)}</p>
                                        <p class="mb-1"><i class="bi bi-calendar-event text-primary"></i> <strong>${dateRange}</strong></p>
                                        <p class="mb-1"><i class="bi bi-currency-rupee"></i> Total: ₹${bk.totalAmount || 0}</p>
                                        <p class="mb-1"><i class="bi bi-wallet2 text-success"></i> Advance: ₹${bk.advancePayment || 0}</p>
                                        <p class="mb-1"><i class="bi bi-cash-coin text-success"></i> Remaining: ₹${bk.remainingPayment ?? 'N/A'}</p>
                                        <p><i class="bi bi-circle-fill me-1 ${getPaymentStatusClass(bk.paymentStatus)}"></i>
                                            Status: <span class="${getPaymentStatusClass(bk.paymentStatus)}">${bk.paymentStatus || 'Pending'}</span>
                                        </p>
                                        <hr/>
                                        ${formatShifts(bk)}
                                    </div>
                                </div>
                            </div>`;

                        container.append(card);

                        // 🔔 Push notification logic
                        const daysLeft = Math.floor((from - now) / (1000 * 60 * 60 * 24));
                        if (daysLeft === 2 && "Notification" in window) {
                            const notifyKey = `notified-${bk.bookingId}`;
                            if (!localStorage.getItem(notifyKey)) {
                                const sendNotification = () => {
                                    new Notification("Reminder: Upcoming Booking", {
                                        body: `Booking for ${bk.customerName} is in 2 days.`
                                    });
                                    localStorage.setItem(notifyKey, '1');
                                };
                                if (Notification.permission === "granted") {
                                    sendNotification();
                                } else if (Notification.permission !== "denied") {
                                    Notification.requestPermission().then(permission => {
                                        if (permission === "granted") sendNotification();
                                    });
                                }
                            }
                        }
                    });
                });
            }

            $('.filter-btn').click(function () {
                const days = +$(this).data('days');
                loadUpcomingEvents(days);
            });

            // Load default
            loadUpcomingEvents(30);
        });
    </script>

</body>
</html>
